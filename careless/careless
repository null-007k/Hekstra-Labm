#!/usr/bin/env python

from careless.parser import parser
from careless.merge.merge import *
import numpy as np


parser = parser.parse_args()

if parser.type == 'mono':
    merger = MonoMerger.from_isomorphous_mtzs(*parser.mtzinput, anomalous=parser.anomalous, dmin=parser.dmin, isigi_cutoff=parser.isigi_cutoff)
elif parser.type == 'poly':
    merger = PolyMerger.from_isomorphous_mtzs(*parser.mtzinput, anomalous=parser.anomalous, dmin=None, isigi_cutoff=parser.isigi_cutoff)
    merger.expand_harmonics(dmin=parser.dmin, wavelength_key=parser.wavelength_key, wavelength_range=parser.wavelength_range)
else:
    raise ValueError(f"Parser.type is {parser.type} but expected either 'mono' or 'poly'")

if parser.prior_mtz:
    merger.append_reference_data(parser.prior_mtz)

if parser.merge_files:
    merger.prep_indices(separate_files=False, image_id_key=parser.image_id_key)
else:
    merger.prep_indices(separate_files=True, image_id_key=parser.image_id_key)

# Now populate merger.prior
if parser.normal_prior:
    merger.add_normal_prior()
elif parser.laplace_prior:
    merger.add_laplace_prior()
elif parser.studentt_prior_dof:
    merger.add_studentt_prior(parser.studentt_prior_dof)
else:
    merger.add_wilson_prior()

#Now populate merger.likelihood
if parser.laplace_likelihood:
    merger.add_laplace_likelihood()
elif parser.studentt_likelihood_dof:
    merger.add_studentt_likelihood(parser.studentt_likelihood_dof)
else:
    merger.add_normal_likelihood()

metadata_keys = parser.metadata_keys.split(',')
merger.add_scaling_model(parser.sequential_layers, metadata_keys)

losses = merger.train_model(parser.iterations, mc_samples=parser.mc_samples, learning_rate=parser.learning_rate)
np.save(f"{parser.output_base}_losses.npy", losses)
results = merger.get_results()

for file_id,df in results.groupby("experiment_id"):
    df = df.dropna() #This will not be necessary after i fix "rescue_variational_distributions"
    df.cell,df.spacegroup = results.cell,results.spacegroup
    df.write_mtz(f"{parser.output_base}_{file_id}.mtz")

if parser.embed:
    from matplotlib import pyplot as plt
    from IPython import embed
    embed(colors='Linux')
